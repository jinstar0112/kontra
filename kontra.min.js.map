{"version":3,"sources":["kontraAssetLoader.js","core.js","gameLoop.js","keyboard.js","pool.js","sprite.js","spriteSheet.js","store.js","tileEngine.js"],"names":["qFactory","nextTick","exceptionHandler","forEach","obj","iterator","context","key","isFunction","hasOwnProperty","call","isArray","length","defaultCallback","value","defaultErrback","reason","reject","all","promises","deferred","defer","counter","results","promise","ref","then","resolve","notify","toString","pending","val","callbacks","undefined","callback","i","ii","createInternalRejectedPromise","progress","errback","progressback","result","wrappedCallback","e","wrappedErrback","wrappedProgressback","push","catch","this","finally","makePromise","resolved","handleCallback","isResolved","callbackOutput","error","when","done","window","q","setTimeout","console","stack","kontra","isImage","isAudio","images","audios","data","assetPaths","audio","Audio","canUse","wav","mp3","canPlayType","replace","ogg","aac","m4a","getAssetExtension","url","substr","lastIndexOf","getAssetType","extension","match","getAssetName","loadAssets","type","numLoaded","numAssets","arguments","asset","Array","assetDeferred","loaded","total","loadImage","name","image","Image","onload","onerror","src","loadAudio","source","playableSource","addEventListener","preload","load","loadData","req","XMLHttpRequest","dataUrl","status","responseText","json","JSON","parse","open","send","bundles","createBundle","bundle","assets","loadBundles","apply","loadManifest","manifest","imagePath","audioPath","dataPath","Object","keys","document","init","properties","isString","canvas","getElementById","isCanvas","getElementsByTagName","ReferenceError","logError","getContext","game","width","height","message","noop","isNumber","nodeName","toLowerCase","timestamp","performance","now","Date","getTime","gameLoop","create","_proto","set","update","render","_accumulator","_delta","fps","frame","_this","_rAF","requestAnimationFrame","bind","_now","_dt","_last","start","stop","cancelAnimationFrame","normalizeKeyCode","which","keyCode","normalizeKeys","combination","trim","modifier","modifierOrder","indexOf","shiftKeys","join","getKeyCombination","keyMap","keydownEventHandler","split","pressedKeys","preventDefault","keyupEventHandler","aliases","blurEventHandler",8,9,13,16,17,18,20,27,32,33,34,35,36,37,38,39,40,45,46,91,92,93,144,145,106,107,109,110,111,186,187,188,189,190,191,192,219,220,221,222,"String","fromCharCode","~","!","@","#","$","%","^","&","*","(",")","_","+",":","\"","<",">","?","|","plus","leftwindow","select","bindKey","SyntaxError","unbindKey","keyIsPressed","pressed","pool","isAlive","objects","size","maxSize","Infinity","lastIndex","get","x","unshift","j","Math","vector","y","add","dt","sqrt","angle","atan2","fromAngle","magnitude","cos","sin","sprite","position","velocity","acceleration","advance","updateAnimation","timeToLive","draw","drawImage","playAnimation","currentAnimation","animations","drawAnimation","dx","dy","ddx","ddy","animation","spriteSheet","frames","frameSpeed","currentFrame","row","framesPerRow","col","play","pause","frameWidth","frameHeight","createAnimations","sequence","_parseFrames","consecutiveFrames","map","Number","direction","localStorage","store","remove","setItem","stringify","getItem","removeItem","clear","TileEngine","associateImage","firstTile","tileIndex","tileWidth","tileHeight","len","preRenderImage","tile","sx","sy","layer","layers","layerOrder","tileOffset","offScreenContext","offScreenCanvas","createElement","addImage","removeImage","img","splice","addLayer","index","sort","a","b","removeLayer"],"mappings":"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","file":"kontra.min.js","sourcesContent":["/**\n * The MIT License\n *\n * Copyright (c) 2010-2012 Google, Inc. http://angularjs.org\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nwindow.q = qFactory(function(callback) {\n  setTimeout(function() {\n    callback();\n  }, 0);\n}, function(e) {\n  console.error('qLite: ' + e.stack);\n});\n\n/**\n * Constructs a promise manager.\n *\n * @param {function(Function)} nextTick Function for executing functions in the next turn.\n * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for\n *     debugging purposes.\n * @returns {object} Promise manager.\n */\nfunction qFactory(nextTick, exceptionHandler) {\n  var toString = ({}).toString;\n  var isFunction = function isFunction(value){return typeof value == 'function';};\n  var isArray = function isArray(value) {return toString.call(value) === '[object Array]';};\n\n  function forEach(obj, iterator, context) {\n    var key;\n    if (obj) {\n      if (isFunction(obj)) {\n        for (key in obj) {\n          // Need to check if hasOwnProperty exists,\n          // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function\n          if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {\n            iterator.call(context, obj[key], key);\n          }\n        }\n      } else if (obj.forEach && obj.forEach !== forEach) {\n        obj.forEach(iterator, context);\n      } else if (isArray(obj)) {\n        for (key = 0; key < obj.length; key++)\n          iterator.call(context, obj[key], key);\n      } else {\n        for (key in obj) {\n          if (obj.hasOwnProperty(key)) {\n            iterator.call(context, obj[key], key);\n          }\n        }\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @ngdoc method\n   * @name $q#defer\n   * @function\n   *\n   * @description\n   * Creates a `Deferred` object which represents a task which will finish in the future.\n   *\n   * @returns {Deferred} Returns a new instance of deferred.\n   */\n  var defer = function() {\n    var pending = [],\n        value, deferred;\n\n    deferred = {\n\n      resolve: function(val) {\n        if (pending) {\n          var callbacks = pending;\n          pending = undefined;\n          value = ref(val);\n\n          if (callbacks.length) {\n            nextTick(function() {\n              var callback;\n              for (var i = 0, ii = callbacks.length; i < ii; i++) {\n                callback = callbacks[i];\n                value.then(callback[0], callback[1], callback[2]);\n              }\n            });\n          }\n        }\n      },\n\n\n      reject: function(reason) {\n        deferred.resolve(createInternalRejectedPromise(reason));\n      },\n\n\n      notify: function(progress) {\n        if (pending) {\n          var callbacks = pending;\n\n          if (pending.length) {\n            nextTick(function() {\n              var callback;\n              for (var i = 0, ii = callbacks.length; i < ii; i++) {\n                callback = callbacks[i];\n                callback[2](progress);\n              }\n            });\n          }\n        }\n      },\n\n\n      promise: {\n        then: function(callback, errback, progressback) {\n          var result = defer();\n\n          var wrappedCallback = function(value) {\n            try {\n              result.resolve((isFunction(callback) ? callback : defaultCallback)(value));\n            } catch(e) {\n              result.reject(e);\n              exceptionHandler(e);\n            }\n          };\n\n          var wrappedErrback = function(reason) {\n            try {\n              result.resolve((isFunction(errback) ? errback : defaultErrback)(reason));\n            } catch(e) {\n              result.reject(e);\n              exceptionHandler(e);\n            }\n          };\n\n          var wrappedProgressback = function(progress) {\n            try {\n              result.notify((isFunction(progressback) ? progressback : defaultCallback)(progress));\n            } catch(e) {\n              exceptionHandler(e);\n            }\n          };\n\n          if (pending) {\n            pending.push([wrappedCallback, wrappedErrback, wrappedProgressback]);\n          } else {\n            value.then(wrappedCallback, wrappedErrback, wrappedProgressback);\n          }\n\n          return result.promise;\n        },\n\n        \"catch\": function(callback) {\n          return this.then(null, callback);\n        },\n\n        \"finally\": function(callback) {\n\n          function makePromise(value, resolved) {\n            var result = defer();\n            if (resolved) {\n              result.resolve(value);\n            } else {\n              result.reject(value);\n            }\n            return result.promise;\n          }\n\n          function handleCallback(value, isResolved) {\n            var callbackOutput = null;\n            try {\n              callbackOutput = (callback ||defaultCallback)();\n            } catch(e) {\n              return makePromise(e, false);\n            }\n            if (callbackOutput && isFunction(callbackOutput.then)) {\n              return callbackOutput.then(function() {\n                return makePromise(value, isResolved);\n              }, function(error) {\n                return makePromise(error, false);\n              });\n            } else {\n              return makePromise(value, isResolved);\n            }\n          }\n\n          return this.then(function(value) {\n            return handleCallback(value, true);\n          }, function(error) {\n            return handleCallback(error, false);\n          });\n        }\n      }\n    };\n\n    return deferred;\n  };\n\n\n  var ref = function(value) {\n    if (value && isFunction(value.then)) return value;\n    return {\n      then: function(callback) {\n        var result = defer();\n        nextTick(function() {\n          result.resolve(callback(value));\n        });\n        return result.promise;\n      }\n    };\n  };\n\n\n  /**\n   * @ngdoc method\n   * @name $q#reject\n   * @function\n   *\n   * @description\n   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be\n   * used to forward rejection in a chain of promises. If you are dealing with the last promise in\n   * a promise chain, you don't need to worry about it.\n   *\n   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of\n   * `reject` as the `throw` keyword in JavaScript. This also means that if you \"catch\" an error via\n   * a promise error callback and you want to forward the error to the promise derived from the\n   * current promise, you have to \"rethrow\" the error by returning a rejection constructed via\n   * `reject`.\n   *\n   * ```js\n   *   promiseB = promiseA.then(function(result) {\n   *     // success: do something and resolve promiseB\n   *     //          with the old or a new result\n   *     return result;\n   *   }, function(reason) {\n   *     // error: handle the error if possible and\n   *     //        resolve promiseB with newPromiseOrValue,\n   *     //        otherwise forward the rejection to promiseB\n   *     if (canHandle(reason)) {\n   *      // handle the error and recover\n   *      return newPromiseOrValue;\n   *     }\n   *     return $q.reject(reason);\n   *   });\n   * ```\n   *\n   * @param {*} reason Constant, message, exception or an object representing the rejection reason.\n   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.\n   */\n  var reject = function(reason) {\n    var result = defer();\n    result.reject(reason);\n    return result.promise;\n  };\n\n  var createInternalRejectedPromise = function(reason) {\n    return {\n      then: function(callback, errback) {\n        var result = defer();\n        nextTick(function() {\n          try {\n            result.resolve((isFunction(errback) ? errback : defaultErrback)(reason));\n          } catch(e) {\n            result.reject(e);\n            exceptionHandler(e);\n          }\n        });\n        return result.promise;\n      }\n    };\n  };\n\n\n  /**\n   * @ngdoc method\n   * @name $q#when\n   * @function\n   *\n   * @description\n   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.\n   * This is useful when you are dealing with an object that might or might not be a promise, or if\n   * the promise comes from a source that can't be trusted.\n   *\n   * @param {*} value Value or a promise\n   * @returns {Promise} Returns a promise of the passed value or promise\n   */\n  var when = function(value, callback, errback, progressback) {\n    var result = defer(),\n        done;\n\n    var wrappedCallback = function(value) {\n      try {\n        return (isFunction(callback) ? callback : defaultCallback)(value);\n      } catch (e) {\n        exceptionHandler(e);\n        return reject(e);\n      }\n    };\n\n    var wrappedErrback = function(reason) {\n      try {\n        return (isFunction(errback) ? errback : defaultErrback)(reason);\n      } catch (e) {\n        exceptionHandler(e);\n        return reject(e);\n      }\n    };\n\n    var wrappedProgressback = function(progress) {\n      try {\n        return (isFunction(progressback) ? progressback : defaultCallback)(progress);\n      } catch (e) {\n        exceptionHandler(e);\n      }\n    };\n\n    nextTick(function() {\n      ref(value).then(function(value) {\n        if (done) return;\n        done = true;\n        result.resolve(ref(value).then(wrappedCallback, wrappedErrback, wrappedProgressback));\n      }, function(reason) {\n        if (done) return;\n        done = true;\n        result.resolve(wrappedErrback(reason));\n      }, function(progress) {\n        if (done) return;\n        result.notify(wrappedProgressback(progress));\n      });\n    });\n\n    return result.promise;\n  };\n\n\n  function defaultCallback(value) {\n    return value;\n  }\n\n\n  function defaultErrback(reason) {\n    return reject(reason);\n  }\n\n\n  /**\n   * @ngdoc method\n   * @name $q#all\n   * @function\n   *\n   * @description\n   * Combines multiple promises into a single promise that is resolved when all of the input\n   * promises are resolved.\n   *\n   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.\n   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,\n   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.\n   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected\n   *   with the same rejection value.\n   */\n  function all(promises) {\n    var deferred = defer(),\n        counter = 0,\n        results = isArray(promises) ? [] : {};\n\n    forEach(promises, function(promise, key) {\n      counter++;\n      ref(promise).then(function(value) {\n        if (results.hasOwnProperty(key)) return;\n        results[key] = value;\n        if (!(--counter)) deferred.resolve(results);\n      }, function(reason) {\n        if (results.hasOwnProperty(key)) return;\n        deferred.reject(reason);\n      }, function(reason) {\n        if (results.hasOwnProperty(key)) return;\n        deferred.notify(reason);\n      });\n    });\n\n    if (counter === 0) {\n      deferred.resolve(results);\n    }\n\n    return deferred.promise;\n  }\n\n  return {\n    defer: defer,\n    reject: reject,\n    when: when,\n    all: all\n  };\n}\nvar kontra = (function(kontra) {\n  var isImage = /(jpeg|jpg|gif|png)$/;\n  var isAudio = /(wav|mp3|ogg|aac|m4a)$/;\n  var folderSeparator = /(\\\\|\\/)/g;\n\n  // all assets are stored by name as well as by URL\n  kontra.images = {};\n  kontra.audios = {};\n  kontra.data = {};\n\n  // base asset path for determining asset URLs\n  kontra.assetPaths = {\n    images: '',\n    audios: '',\n    data: '',\n  };\n\n  // audio playability\n  // @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/audio.js\n  var audio = new Audio();\n  kontra.canUse = kontra.canUse || {};\n  kontra.canUse.wav = '';\n  kontra.canUse.mp3 = audio.canPlayType('audio/mpeg;').replace(/^no$/,'');\n  kontra.canUse.ogg = audio.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/,'');\n  kontra.canUse.aac = audio.canPlayType('audio/aac;').replace(/^no$/,'');\n  kontra.canUse.m4a = (audio.canPlayType('audio/x-m4a;') || kontra.canUse.aac).replace(/^no$/,'');\n\n  /**\n   * Get the extension of an asset.\n   * @see http://jsperf.com/extract-file-extension\n   * @memberOf kontra\n   *\n   * @param {string} url - The URL to the asset.\n   *\n   * @returns {string}\n   */\n  kontra.getAssetExtension = function getAssetExtension(url) {\n    return url.substr((~-url.lastIndexOf(\".\") >>> 0) + 2);\n  };\n\n  /**\n   * Get the type of asset based on its extension.\n   * @memberOf kontra\n   *\n   * @param {string} url - The URL to the asset.\n   *\n   * @returns {string} Image, Audio, Data.\n   */\n  kontra.getAssetType = function getAssetType(url) {\n    var extension = this.getAssetExtension(url);\n\n    if (extension.match(isImage)) {\n      return 'Image';\n    }\n    else if (extension.match(isAudio)) {\n      return 'Audio';\n    }\n    else {\n      return 'Data';\n    }\n  };\n\n  /**\n   * Get the name of an asset.\n   * @memberOf kontra\n   *\n   * @param {string} url - The URL to the asset.\n   *\n   * @returns {string}\n   */\n  kontra.getAssetName = function getAssetName(url) {\n    return url.replace(/\\.[^/.]+$/, \"\");\n  };\n\n  return kontra;\n})(kontra || {});\n/*jshint -W084 */\n\nvar kontra = (function(kontra, q) {\n  /**\n   * Load an Image, Audio, or data file.\n   * @memberOf kontra\n   *\n   * @param {string|string[]} - Comma separated list of assets to load.\n   *\n   * @returns {Promise} A deferred promise.\n   *\n   * @example\n   * kontra.loadAsset('car.png');\n   * kontra.loadAsset(['explosion.mp3', 'explosion.ogg']);\n   * kontra.loadAsset('bio.json');\n   * kontra.loadAsset('car.png', ['explosion.mp3', 'explosion.ogg'], 'bio.json');\n   */\n  kontra.loadAssets = function loadAsset() {\n    var deferred = q.defer();\n    var promises = [];\n    var numLoaded = 0;\n    var numAssets = arguments.length;\n    var type, name, url;\n\n    if (!arguments.length) {\n      deferred.resolve();\n    }\n\n    for (var i = 0, asset; asset = arguments[i]; i++) {\n      if (!Array.isArray(asset)) {\n        url = asset;\n      }\n      else {\n        url = asset[0];\n      }\n\n      type = this.getAssetType(url);\n\n      // create a closure for event binding\n      (function(assetDeferred) {\n        promises.push(assetDeferred.promise);\n\n        kontra['load' + type](url).then(\n          function loadAssetSuccess() {\n            assetDeferred.resolve();\n            deferred.notify({'loaded': ++numLoaded, 'total': numAssets});\n          },\n          function loadAssetError(error) {\n            assetDeferred.reject(error);\n        });\n      })(q.defer());\n    }\n\n    q.all(promises).then(\n      function loadAssetsSuccess() {\n        deferred.resolve();\n      },\n      function loadAssetsError(error) {\n        deferred.reject(error);\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * Load an Image file. Uses assetPaths.images to resolve URL.\n   * @memberOf kontra\n   *\n   * @param {string} url - The URL to the Image file.\n   *\n   * @returns {Promise} A deferred promise. Promise resolves with the Image.\n   *\n   * @example\n   * kontra.loadImage('car.png');\n   * kontra.loadImage('autobots/truck.png');\n   */\n  kontra.loadImage = function(url) {\n    var deferred = q.defer();\n    var name = this.getAssetName(url);\n    var image = new Image();\n\n    url = this.assetPaths.images + url;\n\n    image.onload = function loadImageOnLoad() {\n      kontra.images[name] = kontra.images[url] = this;\n      deferred.resolve(this);\n    };\n\n    image.onerror = function loadImageOnError() {\n      deferred.reject('Unable to load image ' + url);\n    };\n\n    image.src = url;\n\n    return deferred.promise;\n  };\n\n  /**\n   * Load an Audio file. Supports loading multiple audio formats which will be resolved by\n   * the browser in the order listed. Uses assetPaths.audios to resolve URL.\n   * @memberOf kontra\n   *\n   * @param {string|string[]} url - The URL to the Audio file.\n   *\n   * @returns {Promise} A deferred promise. Promise resolves with the Audio.\n   *\n   * @example\n   * kontra.loadAudio('sound_effects/laser.mp3');\n   * kontra.loadAudio(['explosion.mp3', 'explosion.m4a', 'explosion.ogg']);\n   *\n   * There are two ways to load Audio in the web: HTML5 Audio or the Web Audio API.\n   * HTML5 Audio has amazing browser support, including back to IE9\n   * (http://caniuse.com/#feat=audio). However, the web Audio API isn't supported in\n   * IE nor Android Browsers (http://caniuse.com/#search=Web%20Audio%20API).\n   *\n   * To support the most browsers we'll use HTML5 Audio. However, doing so means we'll\n   * have to work around mobile device limitations as well as Audio implementation\n   * limitations.\n   *\n   * Android browsers require playing Audio through user interaction whereas iOS 6+ can\n   * play through normal JavaScript. Moreover, Android can only play one sound source at\n   * a time whereas iOS 6+ can handle more than one. See this article for more details\n   * (http://pupunzi.open-lab.com/2013/03/13/making-html5-audio-actually-work-on-mobile/)\n   *\n   * Both iOS and Android will download an Audio through JavaScript, but neither will play\n   * it until user interaction. You can get around this issue by having a splash screen\n   * that requires user interaction to start the game and using that event to play the audio.\n   * (http://jsfiddle.net/straker/5dsm6jgt/)\n   */\n  kontra.loadAudio = function(url) {\n    var deferred = q.defer();\n    var source, name, playableSource, audio;\n\n    if (!Array.isArray(url)) {\n      url = [url];\n    }\n\n    // determine which audio format the browser can play\n    for (var i = 0; source = url[i]; i++) {\n      if ( this.canUse[this.getAssetExtension(source)] ) {\n        playableSource = source;\n        break;\n      }\n    }\n\n    if (!playableSource) {\n      deferred.reject('Browser cannot play any of the audio formats provided');\n    }\n    else {\n      name = this.getAssetName(playableSource);\n      audio = new Audio();\n\n      source = this.assetPaths.audios + playableSource;\n\n      audio.addEventListener('canplay', function loadAudioOnLoad() {\n        kontra.audios[name] = kontra.audios[source] = this;\n        deferred.resolve(this);\n      });\n\n      audio.onerror = function loadAudioOnError() {\n        deferred.reject('Unable to load audio ' + source);\n      };\n\n      audio.src = source;\n      audio.preload = 'auto';\n      audio.load();\n    }\n\n    return deferred.promise;\n  };\n\n\n  /**\n   * Load a data file (be it text or JSON). Uses assetPaths.data to resolve URL.\n   * @memberOf kontra\n   *\n   * @param {string} url - The URL to the data file.\n   *\n   * @returns {Promise} A deferred promise. Resolves with the data or parsed JSON.\n   *\n   * @example\n   * kontra.loadData('bio.json');\n   * kontra.loadData('dialog.txt');\n   */\n  kontra.loadData = function(url) {\n    var deferred = q.defer();\n    var req = new XMLHttpRequest();\n    var name = this.getAssetName(url);\n    var dataUrl = this.assetPaths.data + url;\n\n    req.addEventListener('load', function loadDataOnLoad() {\n      if (req.status !== 200) {\n        deferred.reject(req.responseText);\n        return;\n      }\n\n      try {\n        var json = JSON.parse(req.responseText);\n        kontra.data[name] = kontra.data[dataUrl] = json;\n\n        deferred.resolve(json);\n      }\n      catch(e) {\n        var data = req.responseText;\n        kontra.data[name] = kontra.data[dataUrl] = data;\n\n        deferred.resolve(data);\n      }\n    });\n\n    req.open('GET', dataUrl, true);\n    req.send();\n\n    return deferred.promise;\n  };\n\n  return kontra;\n})(kontra || {}, q);\n/*jshint -W084 */\n\nvar kontra = (function(kontra, q) {\n  kontra.bundles = {};\n\n  /**\n   * Create a group of assets that can be loaded using <code>kontra.loadBundle()</code>.\n   * @memberOf kontra\n   *\n   * @param {string} bundle - The name of the bundle.\n   * @param {string[]} assets - Assets to add to the bundle.\n   *\n   * @example\n   * kontra.createBundle('myBundle', ['car.png', ['explosion.mp3', 'explosion.ogg']]);\n   */\n  kontra.createBundle = function createBundle(bundle, assets) {\n    if (this.bundles[bundle]) {\n      return;\n    }\n\n    this.bundles[bundle] = assets || [];\n  };\n\n  /**\n   * Load all assets that are part of a bundle.\n   * @memberOf kontra\n   *\n   * @param {string|string[]} - Comma separated list of bundles to load.\n   *\n   * @returns {Promise} A deferred promise.\n   *\n   * @example\n   * kontra.loadBundles('myBundle');\n   * kontra.loadBundles('myBundle', 'myOtherBundle');\n   */\n  kontra.loadBundles = function loadBundles() {\n    var deferred = q.defer();\n    var promises = [];\n    var numLoaded = 0;\n    var numAssets = 0;\n    var assets;\n\n    for (var i = 0, bundle; bundle = arguments[i]; i++) {\n      if (!(assets = this.bundles[bundle])) {\n        deferred.reject('Bundle \\'' + bundle + '\\' has not been created.');\n        continue;\n      }\n\n      numAssets += assets.length;\n\n      promises.push(this.loadAssets.apply(this, assets));\n    }\n\n    q.all(promises).then(\n      function loadBundlesSuccess() {\n        deferred.resolve();\n      },\n      function loadBundlesError(error) {\n        deferred.reject(error);\n      },\n      function loadBundlesNofity() {\n        deferred.notify({'loaded': ++numLoaded, 'total': numAssets});\n    });\n\n    return deferred.promise;\n  };\n\n  return kontra;\n})(kontra || {}, q);\n/*jshint -W084 */\n\nvar kontra = (function(kontra, q) {\n  /**\n   * Load an asset manifest file.\n   * @memberOf kontra\n   *\n   * @param {string} url - The URL to the asset manifest file.\n   *\n   * @returns {Promise} A deferred promise.\n   */\n  kontra.loadManifest = function loadManifest(url) {\n    var deferred = q.defer();\n    var bundles;\n\n    kontra.loadData(url).then(\n      function loadManifestSuccess(manifest) {\n        kontra.assetPaths.images = manifest.imagePath || '';\n        kontra.assetPaths.audios = manifest.audioPath || '';\n        kontra.assetPaths.data = manifest.dataPath || '';\n\n        // create bundles and add assets\n        for (var i = 0, bundle; bundle = manifest.bundles[i]; i++) {\n          kontra.createBundle(bundle.name, bundle.assets);\n        }\n\n        if (!manifest.loadBundles) {\n          deferred.resolve();\n          return;\n        }\n\n        // load all bundles\n        if (manifest.loadBundles === 'all') {\n          bundles = Object.keys(kontra.bundles || {});\n        }\n        // load a single bundle\n        else if (!Array.isArray(manifest.loadBundles)) {\n          bundles = [manifest.loadBundles];\n        }\n        // load multiple bundles\n        else {\n          bundles = manifest.loadBundles;\n        }\n\n        kontra.loadBundles.apply(kontra, bundles).then(\n          function loadBundlesSuccess() {\n            deferred.resolve();\n          },\n          function loadBundlesError(error) {\n            deferred.reject(error);\n          },\n          function loadBundlesNotify(progress) {\n            deferred.notify(progress);\n        });\n      },\n      function loadManifestError(error) {\n        deferred.reject(error);\n    });\n\n    return deferred.promise;\n  };\n\n  return kontra;\n})(kontra || {}, q);","/* global console */\n\nvar kontra = (function(kontra, document) {\n  'use strict';\n\n  /**\n   * Set up the canvas.\n   * @memberOf kontra\n   *\n   * @param {object} properties - Properties for the game.\n   * @param {string|Canvas} properties.canvas - Main canvas ID or Element for the game.\n   */\n  kontra.init = function init(properties) {\n    properties = properties || {};\n\n    if (kontra.isString(properties.canvas)) {\n      this.canvas = document.getElementById(properties.canvas);\n    }\n    else if (kontra.isCanvas(properties.canvas)) {\n      this.canvas = properties.canvas;\n    }\n    else {\n      this.canvas = document.getElementsByTagName('canvas')[0];\n\n      if (!this.canvas) {\n        var error = new ReferenceError('No canvas element found.');\n        kontra.logError(error, 'You must provide a canvas element for the game.');\n        return;\n      }\n    }\n\n    this.context = this.canvas.getContext('2d');\n    this.game = {\n      width: this.canvas.width,\n      height: this.canvas.height\n    };\n  };\n\n  /**\n   * Throw an error message to the user with readable formating.\n   * @memberOf kontra\n   *\n   * @param {Error}  error - Error object.\n   * @param {string} message - Error message.\n   */\n  kontra.logError = function logError(error, message) {\n    console.error('Kontra: ' + message + '\\n\\t' + error.stack);\n  };\n\n  /**\n   * Noop function.\n   * @memberOf kontra\n   */\n  kontra.noop = function noop() {};\n\n  /**\n   * Determine if a value is an Array.\n   * @memberOf kontra\n   *\n   * @param {*} value - Value to test.\n   *\n   * @returns {boolean}\n   */\n  kontra.isArray = Array.isArray;\n\n  /**\n   * Determine if a value is a String.\n   * @memberOf kontra\n   *\n   * @param {*} value - Value to test.\n   *\n   * @returns {boolean}\n   */\n  kontra.isString = function isString(value) {\n    return typeof value === 'string';\n  };\n\n  /**\n   * Determine if a value is a Number.\n   * @memberOf kontra\n   *\n   * @param {*} value - Value to test.\n   *\n   * @returns {boolean}\n   */\n  kontra.isNumber = function isNumber(value) {\n    return typeof value === 'number';\n  };\n\n  /**\n   * Determine if a value is an Image.\n   * @memberOf kontra\n   *\n   * @param {*} value - Value to test.\n   *\n   * @returns {boolean}\n   */\n  kontra.isImage = function isImage(value) {\n    return value && value.nodeName.toLowerCase() === 'img';\n  };\n\n  /**\n   * Determine if a value is a Canvas.\n   * @memberOf kontra\n   *\n   * @param {*} value - Value to test.\n   *\n   * @returns {boolean}\n   */\n  kontra.isCanvas = function isCanvas(value) {\n    return value && value.nodeName.toLowerCase() === 'canvas';\n  };\n\n  return kontra;\n})(kontra || {}, document);","var kontra = (function(kontra, window, document) {\n  'use strict';\n\n  /**\n   * Returns the current time. Uses the User Timing API if it's available or defaults to\n   * using Date().getTime()\n   * @private\n   *\n   * @returns {number}\n   */\n  kontra.timestamp = (function() {\n    if (window.performance && window.performance.now) {\n      return function timestampPerformance() {\n        return window.performance.now();\n      };\n    }\n    else {\n      return function timestampDate() {\n        return new Date().getTime();\n      };\n    }\n  })();\n\n\n\n\n\n  /**\n   * Game loop that updates and renders the game every frame.\n   * @memberOf kontra\n   *\n   * @see kontra.gameLoop._proto.set for list of parameters.\n   */\n  kontra.gameLoop = function(properties) {\n    var gameLoop = Object.create(kontra.gameLoop._proto);\n    gameLoop.set(properties);\n\n    return gameLoop;\n  };\n\n  kontra.gameLoop._proto = {\n    /**\n     * Set properties on the game loop.\n     * @memberOf kontra.gameLoop\n     *\n     * @param {object}   properties - Configure the game loop.\n     * @param {number}   [properties.fps=60] - Desired frame rate.\n     * @param {function} properties.update - Function called to update the game.\n     * @param {function} properties.render - Function called to render the game.\n     */\n    set: function(properties) {\n      properties = properties || {};\n\n      // check for required functions\n      if (typeof properties.update !== 'function' || typeof properties.render !== 'function') {\n        var error = new ReferenceError('Required functions not found');\n        kontra.logError(error, 'You must provide update() and render() functions to create a game loop.');\n        return;\n      }\n\n      // animation variables\n      this._accumulator = 0;\n      this._delta = 1E3 / (properties.fps || 60);\n\n      this.update = properties.update;\n      this.render = properties.render;\n    },\n\n    /**\n     * Called every frame of the game loop.\n     * @memberOf kontra.gameLoop\n     */\n    frame: function() {\n      var _this = this;\n\n      _this._rAF = requestAnimationFrame(_this.frame.bind(_this));\n\n      _this._now = kontra.timestamp();\n      _this._dt = _this._now - _this._last;\n      _this._last = _this._now;\n\n      // prevent updating the game with a very large dt if the game were to lose focus\n      // and then regain focus later\n      if (_this._dt > 1E3) {\n        return;\n      }\n\n      _this._accumulator += _this._dt;\n\n      while (_this._accumulator >= _this._delta) {\n        _this.update(_this._delta / 1E3);\n\n        _this._accumulator -= _this._delta;\n      }\n\n      _this.render();\n    },\n\n    /**\n     * Start the game loop.\n     * @memberOf kontra.gameLoop\n     */\n    start: function() {\n      this._last = kontra.timestamp();\n      requestAnimationFrame(this.frame.bind(this));\n    },\n\n    /**\n     * Stop the game loop.\n     */\n    stop: function() {\n      cancelAnimationFrame(this._rAF);\n    }\n  };\n\n  return kontra;\n})(kontra || {}, window, document);","/*jshint -W084 */\n\nvar kontra = (function(kontra, window) {\n  'use strict';\n\n  var callbacks = {};\n  var pressedKeys = {};\n\n  var keyMap = {\n    // named keys\n    8: 'backspace',\n    9: 'tab',\n    13: 'enter',\n    16: 'shift',\n    17: 'ctrl',\n    18: 'alt',\n    20: 'capslock',\n    27: 'esc',\n    32: 'space',\n    33: 'pageup',\n    34: 'pagedown',\n    35: 'end',\n    36: 'home',\n    37: 'left',\n    38: 'up',\n    39: 'right',\n    40: 'down',\n    45: 'insert',\n    46: 'delete',\n    91: 'leftwindow',\n    92: 'rightwindow',\n    93: 'select',\n    144: 'numlock',\n    145: 'scrolllock',\n\n    // special characters\n    106: '*',\n    107: '+',\n    109: '-',\n    110: '.',\n    111: '/',\n    186: ';',\n    187: '=',\n    188: ',',\n    189: '-',\n    190: '.',\n    191: '/',\n    192: '`',\n    219: '[',\n    220: '\\\\',\n    221: ']',\n    222: '\\''\n  };\n\n  // alpha keys\n  for (var i = 0; i < 26; i++) {\n    keyMap[65+i] = String.fromCharCode(65+i).toLowerCase();\n  }\n  // numeric keys\n  for (i = 0; i < 10; i++) {\n    keyMap[48+i] = ''+i;\n  }\n  // f keys\n  for (i = 1; i < 20; i++) {\n    keyMap[111+i] = 'f'+i;\n  }\n  // keypad\n  for (i = 0; i < 10; i++) {\n    keyMap[96+i] = 'numpad'+i;\n  }\n\n  // shift keys mapped to their non-shift equivalent\n  var shiftKeys = {\n    '~': '`',\n    '!': '1',\n    '@': '2',\n    '#': '3',\n    '$': '4',\n    '%': '5',\n    '^': '6',\n    '&': '7',\n    '*': '8',\n    '(': '9',\n    ')': '0',\n    '_': '-',\n    '+': '=',\n    ':': ';',\n    '\"': '\\'',\n    '<': ',',\n    '>': '.',\n    '?': '/',\n    '|': '\\\\',\n    'plus': '='\n  };\n\n  // aliases modifier keys to their actual key for keyup event\n  var aliases = {\n    'leftwindow': 'meta',  // mac\n    'select': 'meta'  // mac\n  };\n\n  // modifier order for combinations\n  var modifierOrder = ['meta', 'ctrl', 'alt', 'shift'];\n\n  window.addEventListener('keydown', keydownEventHandler);\n  window.addEventListener('keyup', keyupEventHandler);\n  window.addEventListener('blur', blurEventHandler);\n\n  /**\n   * Register a function to be called on a keyboard keys.\n   * @memberOf kontra\n   *\n   * @param {string|string[]} keys - keys combination string(s).\n   *\n   * @throws {SyntaxError} If callback is not a function.\n   */\n  kontra.bindKey = function bindKey(keys, callback) {\n    if (typeof callback !== 'function') {\n      var error = new SyntaxError('Invalid function.');\n      kontra.logError(error, 'You must provide a function as the second parameter.');\n      return;\n    }\n\n    keys = (kontra.isArray(keys) ? keys : [keys]);\n\n    for (var i = 0, key; key = keys[i]; i++) {\n      var combination = normalizeKeys(key);\n\n      callbacks[combination] = callback;\n    }\n  };\n\n  /**\n   * Remove the callback function for a key combination.\n   * @param {string|string[]} keys - keys combination string.\n   */\n  kontra.unbindKey = function unbindKey(keys) {\n    keys = (kontra.isArray(keys) ? keys : [keys]);\n\n    for (var i = 0, key; key = keys[i]; i++) {\n      var combination = normalizeKeys(key);\n\n      callbacks[combination] = undefined;\n    }\n  };\n\n  /**\n   * Returns whether a key is pressed.\n   * @memberOf kontra\n   *\n   * @param {string} keys - Keys combination string.\n   *\n   * @returns {boolean}\n   */\n  kontra.keyIsPressed = function keyIsPressed(keys) {\n    var combination = normalizeKeys(keys);\n    var pressed = true;\n\n    // loop over each key in the combination and verify that it is pressed\n    keys = combination.split('+');\n    for (var i = 0, key; key = keys[i]; i++) {\n      pressed = pressed && !!pressedKeys[key];\n    }\n\n    return pressed;\n  };\n\n  /**\n   * Normalize the event keycode\n   * @private\n   *\n   * @param {Event} e\n   *\n   * @returns {number}\n   */\n  function normalizeKeyCode(e) {\n    return (typeof e.which === 'number' ? e.which : e.keyCode);\n  }\n\n  /**\n   * Normalize keys combination order.\n   * @private\n   *\n   * @param {string} keys - keys combination string.\n   *\n   * @returns {string} Normalized combination.\n   *\n   * @example\n   * normalizeKeys('c+ctrl');  //=> 'ctrl+c'\n   * normalizeKeys('shift+++meta+alt');  //=> 'meta+alt+shift+plus'\n   */\n  function normalizeKeys(keys) {\n    var combination = [];\n\n    // handle '++' combinations\n    keys = keys.trim().replace('++', '+plus');\n\n    // put modifiers in the correct order\n    for (var i = 0, modifier; modifier = modifierOrder[i]; i++) {\n\n      // check for the modifier\n      if (keys.indexOf(modifier) !== -1) {\n        combination.push(modifier);\n        keys = keys.replace(modifier, '');\n      }\n    }\n\n    // remove all '+'s to leave only the last key\n    keys = keys.replace(/\\+/g, '').toLowerCase();\n\n    // check for shift key\n    if (shiftKeys[keys]) {\n      combination.push('shift+'+shiftKeys[keys]);\n    }\n    else if(keys) {\n      combination.push(keys);\n    }\n\n    return combination.join('+');\n  }\n\n  /**\n   * Get the key combination from an event.\n   * @private\n   *\n   * @param {Event} e\n   *\n   * @return {string} normalized combination.\n   */\n  function getKeyCombination(e) {\n    var combination = [];\n\n    // check for modifiers\n    for (var i = 0, modifier; modifier = modifierOrder[i]; i++) {\n      if (e[modifier+'Key']) {\n        combination.push(modifier);\n      }\n    }\n\n    var key = keyMap[normalizeKeyCode(e)];\n\n    // prevent duplicate keys from being added to the combination\n    // for example 'ctrl+ctrl' since ctrl is both a modifier and\n    // a regular key\n    if (combination.indexOf(key) === -1) {\n      combination.push(key);\n    }\n\n    return combination.join('+');\n  }\n\n  /**\n   * Execute a function that corresponds to a keyboard combination.\n   * @private\n   *\n   * @param {Event} e\n   */\n  function keydownEventHandler(e) {\n    var combination = getKeyCombination(e);\n\n    // set pressed keys\n    for (var i = 0, keys = combination.split('+'), key; key = keys[i]; i++) {\n      pressedKeys[key] = true;\n    }\n\n    if (callbacks[combination]) {\n      callbacks[combination](e, combination);\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Set the released key to not being pressed.\n   * @private\n   *\n   * @param {Event} e\n   */\n  function keyupEventHandler(e) {\n    var key = keyMap[normalizeKeyCode(e)];\n    pressedKeys[key] = false;\n\n    if (aliases[key]) {\n      pressedKeys[ aliases[key] ] = false;\n    }\n  }\n\n  /**\n   * Reset pressed keys.\n   * @private\n   *\n   * @param {Event} e\n   */\n  function blurEventHandler(e) {\n    pressedKeys = {};\n  }\n\n  return kontra;\n})(kontra || {}, window);","/*jshint -W084 */\n\nvar kontra = (function(kontra) {\n  'use strict';\n\n  /**\n   * Object pool. The pool will grow in size to accommodate as many objects as are needed.\n   * Unused items are at the front of the pool and in use items are at the of the pool.\n   * @memberOf kontra\n   *\n   * @see kontra.pool._proto.set for list of parameters.\n   */\n  kontra.pool = function(properties) {\n    var pool = Object.create(kontra.pool._proto);\n    pool.set(properties);\n\n    return pool;\n  };\n\n  kontra.pool._proto = {\n    /**\n     * Set properties on the pool.\n     *\n     * @param {object} properties - Properties of the pool.\n     * @param {object} properties.create - Function that returns the object to use in the pool.\n     * @param {number} properties.maxSize - The maximum size that the pool will grow to.\n     *\n     * Objects inside the pool must implement <code>render()</code>, <code>update()</code>,\n     * <code>set()</code>, and <code>isAlive()</code> functions.\n     */\n    set: function(properties) {\n      properties = properties || {};\n\n      // ensure objects for the pool have required functions\n      var obj;\n      try {\n        obj = properties.create();\n\n        if (typeof obj.render !== 'function' || typeof obj.update !== 'function' ||\n            typeof obj.set !== 'function' || typeof obj.isAlive !== 'function') {\n          throw new ReferenceError('Required functions not found.');\n        }\n      }\n      catch (error) {\n        var message;\n\n        if (error.name === 'TypeError') {\n          message = 'The parameter \\'create\\' must be a function that returns an object.';\n        }\n        else {\n          message = 'Objects to be pooled must implement render(), update(), set() and isAlive() functions.';\n        }\n\n        kontra.logError(error, message);\n        return;\n      }\n\n      this.create = properties.create;\n\n      // start the pool with an object\n      this.objects = [obj];\n      this.size = 1;\n      this.maxSize = properties.maxSize || Infinity;\n      this.lastIndex = 0;\n    },\n\n    /**\n     * Get an object from the pool.\n     * @memberOf kontra.pool\n     *\n     * @param {object} properties - Properties to pass to object.set().\n     */\n    get: function(properties) {\n      var _this = this;\n\n      // the pool is out of objects if the first object is in use and it can't grow\n      if (_this.objects[0].isAlive() && _this.size === _this.maxSize) {\n        return;\n      }\n      // 'double' the size of the array by filling it with twice as many objects\n      else {\n        for (var x = 0; x < _this.size && _this.objects.length < _this.maxSize; x++) {\n          _this.objects.unshift(_this.create());\n        }\n\n        _this.size = _this.objects.length;\n        _this.lastIndex = _this.size - 1;\n      }\n\n      // save off first object in pool to reassign to last object after unshift\n      var obj = _this.objects[0];\n      obj.set(properties);\n\n      // failsafe to ensure that the last object in the list after a get() is never dead\n      // doing so will cause the entire update/render logic to break\n      if (!obj.isAlive()) {\n        return;\n      }\n\n      // unshift the array\n      for (var i = 1; i < _this.size; i++) {\n        _this.objects[i-1] = _this.objects[i];\n      }\n\n      _this.objects[_this.lastIndex] = obj;\n    },\n\n    /**\n     * Update all alive pool objects.\n     * @memberOf kontra.pool\n     */\n    update: function() {\n      var i = this.lastIndex;\n      var obj;\n\n      while (obj = this.objects[i]) {\n\n        // once we find the first object that is not alive we can stop\n        if (!obj.isAlive()) {\n          return;\n        }\n\n        obj.update();\n\n        // if the object is dead, move it to the front of the pool\n        if (!obj.isAlive()) {\n\n          // push an object from the middle of the pool to the front of the pool\n          // without returning a new array through Array#splice to avoid garbage\n          // collection of the old array\n          // @see http://jsperf.com/object-pools-array-vs-loop\n          for (var j = i; j > 0; j--) {\n            this.objects[j] = this.objects[j-1];\n          }\n\n          this.objects[0] = obj;\n        }\n        else {\n          i--;\n        }\n      }\n    },\n\n    /**\n     * render all alive pool objects.\n     * @memberOf kontra.pool\n     */\n    render: function() {\n      for (var i = this.lastIndex, obj; obj = this.objects[i]; i--) {\n\n        // once we find the first object that is not alive we can stop\n        if (!obj.isAlive()) {\n          return;\n        }\n\n        obj.render();\n      }\n    }\n  };\n\n  return kontra;\n})(kontra || {});","var kontra = (function(kontra, Math, undefined) {\n  'use strict';\n\n  /**\n   * A vector for 2d space.\n   * @memberOf kontra\n   *\n   * @see kontra.vector._proto.set for list of parameters.\n   */\n  kontra.vector = function(x, y) {\n    var vector = Object.create(kontra.vector._proto);\n    vector.set(x, y);\n\n    return vector;\n  };\n\n  kontra.vector._proto = {\n    /**\n     * Set the vector's x and y position.\n     * @memberOf kontra.vector\n     *\n     * @param {number} x=0 - Center x coordinate.\n     * @param {number} y=0 - Center y coordinate.\n     */\n    set: function(x, y) {\n      this.x = x || 0;\n      this.y = y || 0;\n    },\n\n    /**\n     * Add a vector to this vector.\n     * @memberOf kontra.vector\n     *\n     * @param {vector} vector - Vector to add.\n     * @param {number} dt=1 - Time since last update.\n     */\n    add: function(vector, dt) {\n      this.x += vector.x * (dt || 1);\n      this.y += vector.y * (dt || 1);\n    },\n\n    /**\n     * Get the length of the vector.\n     * @memberOf kontra.vector\n     *\n     * @returns {number}\n     */\n    length: function() {\n      return Math.sqrt(this.x * this.x + this.y * this.y);\n    },\n\n    /**\n     * Get the angle of the vector.\n     * @memberOf kontra.vector\n     *\n     * @returns {number}\n     */\n    angle: function() {\n      return Math.atan2(this.y, this.x);\n    },\n\n    /**\n     * Get a new vector from an angle and magnitude\n     * @memberOf kontra.vector\n     *\n     * @returns {vector}\n     */\n    fromAngle: function(angle, magnitude) {\n      return vector(magnitude * Math.cos(angle), magnitude * Math.sin(angle));\n    }\n  };\n\n\n\n\n\n  /**\n   * A sprite with a position, velocity, and acceleration.\n   * @memberOf kontra\n   * @requires kontra.vector\n   *\n   * @see kontra.sprite._prot.set for list of parameters.\n   */\n  kontra.sprite = function(properties) {\n    var sprite = Object.create(kontra.sprite._proto);\n    sprite.position = kontra.vector();\n    sprite.velocity = kontra.vector();\n    sprite.acceleration = kontra.vector();\n    sprite.set(properties);\n\n    return sprite;\n  };\n\n  kontra.sprite._proto = {\n    /**\n     * Move the sprite by its velocity.\n     * @memberOf kontra.sprite\n     *\n     * @param {number} dt - Time since last update.\n     */\n    advance: function(dt) {\n      this.velocity.add(this.acceleration, dt);\n      this.position.add(this.velocity, dt);\n\n      this.updateAnimation(dt);\n\n      this.timeToLive--;\n    },\n\n    /**\n     * Draw the sprite.\n     * @memberOf kontra.sprite\n     */\n    draw: function() {\n      this.context.drawImage(this.image, this.position.x, this.position.y);\n    },\n\n    /**\n     * Play an animation.\n     * @memberOf kontra.sprite\n     *\n     * @param {string} name - Name of the animation to play.\n     */\n    playAnimation: function(name) {\n      this.currentAnimation = this.animations[name];\n    },\n\n    /**\n     * Update the currently playing animation. Used when animations are passed to the sprite.\n     * @memberOf kontra.sprite\n     *\n     * @param {number} dt - Time since last update.\n     */\n    updateAnimation: function(dt) {\n      this.currentAnimation.update(dt);\n    },\n\n    /**\n     * Draw the currently playing animation. Used when animations are passed to the sprite.\n     * @memberOf kontra.sprite\n     */\n    drawAnimation: function() {\n      this.currentAnimation.render({\n        context: this.context,\n        x: this.position.x,\n        y: this.position.y\n      });\n    },\n\n    /**\n     * Determine if the sprite is alive.\n     * @memberOf kontra.sprite\n     *\n     * @returns {boolean}\n     */\n    isAlive: function() {\n      return this.timeToLive > 0;\n    },\n\n    /**\n     * Set properties on the sprite.\n     * @memberOf kontra.sprite\n     *\n     * @param {object} properties - Properties to set on the sprite.\n     * @param {number} properties.x - X coordinate of the sprite.\n     * @param {number} properties.y - Y coordinate of the sprite.\n     * @param {number} [properties.dx] - Change in X position.\n     * @param {number} [properties.dy] - Change in Y position.\n     * @param {number} [properties.ddx] - Change in X velocity.\n     * @param {number} [properties.ddy] - Change in Y velocity.\n     * @param {number} [properties.timeToLive=0] - How may frames the sprite should be alive.\n     * @param {Context} [properties.context=kontra.context] - Provide a context for the sprite to draw on.\n     * @param {Image|Canvas} [properties.image] - Image for the sprite.\n     * @param {object} [properties.animations] - Animations for the sprite.\n     * @param {function} [properties.update] - Function to use to update the sprite.\n     * @param {function} [properties.render] - Function to use to render the sprite.\n     *\n     * If you need the sprite to live forever, or just need it to stay on screen until you\n     * decide when to kill it, you can set time to live to <code>Infinity</code>. Just be\n     * sure to override the <code>isAlive()</code> function to return true when the sprite\n     * should die.\n     */\n    set: function(properties) {\n      properties = properties || {};\n\n      var _this = this;\n\n      _this.position.set(properties.x, properties.y);\n      _this.velocity.set(properties.dx, properties.dy);\n      _this.acceleration.set(properties.ddx, properties.ddy);\n      _this.timeToLive = properties.timeToLive || 0;\n\n      _this.context = properties.context || kontra.context;\n\n      if (kontra.isImage(properties.image) || kontra.isCanvas(properties.image)) {\n        _this.image = properties.image;\n        _this.width = properties.image.width;\n        _this.height = properties.image.height;\n\n        _this.render = _this.draw;\n\n        // make the updateAnimation function a noop since there is no animation to update\n        _this.updateAnimation = kontra.noop;\n      }\n      else if (properties.animations) {\n        _this.animations = properties.animations;\n\n        // default the current animation to the first one in the list\n        _this.currentAnimation = Object.keys(properties.animations)[0];\n\n        // change the draw function to draw animations instead of images\n        _this.draw = _this.drawAnimation;\n      }\n      else {\n        // make the render function for a noop since there is no image to draw.\n        // this.render should be overridden if you want to draw something else.\n        _this.render = kontra.noop;\n      }\n\n      if (properties.update) {\n        _this.update = properties.update;\n      }\n\n      if (properties.render) {\n        _this.render = properties.render;\n      }\n    },\n\n    /**\n     * Update the sprites velocity and position.\n     * @memberOf kontra.sprite\n     * @abstract\n     *\n     * @param {number} dt - Time since last update.\n     *\n     * This function can be overridden on a per sprite basis if more functionality\n     * is needed in the update step. Just call <code>this.advance()</code> when you need\n     * the sprite to update its position.\n     *\n     * @example\n     * sprite = new kontra.sprite({\n     *   update: function update(dt) {\n     *     // do some logic\n     *\n     *     this.advance(dt);\n     *   }\n     * });\n     */\n    update: function(dt) {\n      this.advance(dt);\n    },\n\n    /**\n     * Render the sprite.\n     * @memberOf kontra.sprite.\n     * @abstract\n     *\n     * This function can be overridden on a per sprite basis if more functionality\n     * is needed in the render step. Just call <code>this.draw()</code> when you need the\n     * sprite to draw its image.\n     *\n     * @example\n     * sprite = new kontra.sprite({\n     *   render: function render() {\n     *     // do some logic\n     *\n     *     this.draw();\n     *   }\n     * });\n     */\n    render: function() {\n      this.draw();\n    }\n  };\n\n  return kontra;\n})(kontra || {}, Math);","/*jshint -W084 */\n\nvar kontra = (function(kontra, undefined) {\n  'use strict';\n\n  /**\n   * Single animation from a sprite sheet.\n   * @memberOf kontra\n   *\n   * @see kontra.pool._proto.set for list of parameters.\n   */\n  kontra.animation = function(properties) {\n    var animation = Object.create(kontra.animation._proto);\n    animation.set(properties);\n\n    return animation;\n  };\n\n  kontra.animation._proto = {\n    /**\n     * Set properties on the animation.\n     * @memberOf kontra.animation\n     *\n     * @param {object} properties - Properties of the animation.\n     * @param {spriteSheet} properties.spriteSheet - Sprite sheet for the animation.\n     * @param {number[]} properties.frames - List of frames of the animation.\n     * @param {number}  properties.frameSpeed - Time to wait before transitioning the animation to the next frame.\n     */\n    set: function(properties) {\n      properties = properties || {};\n\n      this.spriteSheet = properties.spriteSheet;\n      this.frames = properties.frames;\n      this.frameSpeed = properties.frameSpeed;\n\n      this.currentFrame = 0;\n      this._accumulator = 0;\n      this.update = this.advance;\n      this.render = this.draw;\n    },\n\n    /**\n     * Update the animation. Used when the animation is not paused or stopped.\n     * @memberOf kontra.animation\n     * @private\n     *\n     * @param {number} dt=1 - Time since last update.\n     */\n    advance: function(dt) {\n      // normalize dt to work with milliseconds as a decimal or an integer\n      dt = (dt < 1 ? dt * 1E3 : dt) || 1;\n\n      this._accumulator += dt;\n\n      // update to the next frame if it's time\n      while (this._accumulator >= this.frameSpeed) {\n        this.currentFrame = ++this.currentFrame % this.frames.length;\n\n        this._accumulator -= this.frameSpeed;\n      }\n    },\n\n    /**\n     * Draw the current frame. Used when the animation is not stopped.\n     * @memberOf kontra.animation\n     * @private\n     *\n     * @param {object} properties - How to draw the animation.\n     * @param {integer} properties.x - X position to draw\n     * @param {integer} properties.y - Y position to draw\n     * @param {Context} [properties.context=kontra.context] - Provide a context for the sprite to draw on.\n     */\n    draw: function(properties) {\n      properties = properties || {};\n\n      var context = properties.context || kontra.context;\n\n      // get the row and col of the frame\n      var row = this.frames[this.currentFrame] / this.spriteSheet.framesPerRow | 0;\n      var col = this.frames[this.currentFrame] % this.spriteSheet.framesPerRow | 0;\n\n      context.drawImage(\n        this.spriteSheet.image,\n        col * this.spriteSheet.frame.width, row * this.spriteSheet.frame.height,\n        this.spriteSheet.frame.width, this.spriteSheet.frame.height,\n        properties.x, properties.y,\n        this.spriteSheet.frame.width, this.spriteSheet.frame.height\n      );\n    },\n\n    /**\n     * Play the animation.\n     * @memberOf kontra.animation\n     */\n    play: function() {\n      // restore references to update and render functions only if overridden\n      this.update = this.advance;\n      this.render = this.draw;\n    },\n\n    /**\n     * Stop the animation and prevent update and render.\n     * @memberOf kontra.animation\n     */\n    stop: function() {\n\n      // instead of putting an if statement in both render/update functions that checks\n      // a variable to determine whether to render or update, we can just reassign the\n      // functions to noop and save processing time in the game loop.\n      // @see http://jsperf.com/boolean-check-vs-noop\n      this.update = kontra.noop;\n      this.render = kontra.noop;\n    },\n\n    /**\n     * Pause the animation and prevent update.\n     * @memberOf kontra.animation\n     */\n    pause: function() {\n      this.update = kontra.noop;\n    }\n  };\n\n\n\n\n\n\n  /**\n   * Create a sprite sheet from an image.\n   * @memberOf kontra\n   *\n   * @see kontra.spriteSheet._proto.set for list of parameters.\n   */\n  kontra.spriteSheet = function(properties) {\n    var spriteSheet = Object.create(kontra.spriteSheet._proto);\n    spriteSheet.set(properties);\n\n    return spriteSheet;\n  };\n\n  kontra.spriteSheet._proto = {\n    /**\n     * Set properties on the spriteSheet.\n     * @memberOf kontra\n     * @constructor\n     *\n     * @param {object} properties - Configure the sprite sheet.\n     * @param {Image|Canvas} properties.image - Image for the sprite sheet.\n     * @param {number} properties.frameWidth - Width (in px) of each frame.\n     * @param {number} properties.frameHeight - Height (in px) of each frame.\n     */\n    set: function(properties) {\n      properties = properties || {};\n\n      this.animations = {};\n      this.frame = {};\n\n      if (kontra.isImage(properties.image) || kontra.isCanvas(properties.image)) {\n        this.image = properties.image;\n        this.frame.width = properties.frameWidth;\n        this.frame.height = properties.frameHeight;\n\n        this.framesPerRow = properties.image.width / properties.frameWidth | 0;\n      }\n      else {\n        var error = new SyntaxError('Invalid image.');\n        kontra.logError(error, 'You must provide an Image for the SpriteSheet.');\n        return;\n      }\n\n      if (properties.animations) {\n        this.createAnimations(properties.animations);\n      }\n    },\n\n    /**\n     * Create animations from the sprite sheet.\n     * @memberOf kontra.spriteSheet\n     *\n     * @param {object} animations - List of named animations to create from the Image.\n     * @param {number|string|number[]|string[]} animations.animationName.frames - A single frame or list of frames for this animation.\n     * @param {number} animations.animationName.frameSpeed=1 - Number of frames to wait before transitioning the animation to the next frame.\n     *\n     * @example\n     * var sheet = kontra.spriteSheet(img, 16, 16);\n     * sheet.createAnimations({\n     *   idle: {\n     *     frames: 1  // single frame animation\n     *   },\n     *   walk: {\n     *     frames: '2..6',  // ascending consecutive frame animation (frames 2-6, inclusive)\n     *     frameSpeed: 4\n     *   },\n     *   moonWalk: {\n     *     frames: '6..2',  // descending consecutive frame animation\n     *     frameSpeed: 4\n     *   },\n     *   jump: {\n     *     frames: [7, 12, 2],  // non-consecutive frame animation\n     *     frameSpeed: 3\n     *   },\n     *   attack: {\n     *     frames: ['8..10', 13, '10..8'],  // you can also mix and match, in this case frames [8,9,10,13,10,9,8]\n     *     frameSpeed: 2\n     *   }\n     * });\n     */\n    createAnimations: function(animations) {\n      var error;\n\n      if (!animations || Object.keys(animations).length === 0) {\n        error = new ReferenceError('No animations found.');\n        kontra.logError(error, 'You must provide at least one named animation to create an Animation.');\n        return;\n      }\n\n      // create each animation by parsing the frames\n      var animation, frames, frameSpeed, sequence;\n      for (var name in animations) {\n        if (!animations.hasOwnProperty(name)) {\n          continue;\n        }\n\n        animation = animations[name];\n        frames = animation.frames;\n        frameSpeed = animation.frameSpeed;\n\n        // array that holds the order of the animation\n        sequence = [];\n\n        if (frames === undefined) {\n          error = new ReferenceError('No animation frames found.');\n          kontra.logError(error, 'Animation ' + name + ' must provide a frames property.');\n          return;\n        }\n\n        // single frame\n        if (kontra.isNumber(frames)) {\n          sequence.push(frames);\n        }\n        // consecutive frames\n        else if (kontra.isString(frames)) {\n          sequence = this._parseFrames(frames);\n        }\n        // non-consecutive frames\n        else if (kontra.isArray(frames)) {\n          for (var i = 0, frame; frame = frames[i]; i++) {\n\n            // consecutive frames\n            if (kontra.isString(frame)) {\n\n              // add new frames to the end of the array\n              sequence.push.apply(sequence, this._parseFrames(frame));\n            }\n            // single frame\n            else {\n              sequence.push(frame);\n            }\n          }\n        }\n\n        this.animations[name] = kontra.animation({\n          spriteSheet: this,\n          frames: sequence,\n          frameSpeed: frameSpeed\n        });\n      }\n    },\n\n    /**\n     * Parse a string of consecutive frames.\n     * @memberOf kontra.spriteSheet\n     * @private\n     *\n     * @param {string} frames - Start and end frame.\n     *\n     * @returns {number[]} List of frames.\n     */\n    _parseFrames: function(frames) {\n      var sequence = [];\n      var consecutiveFrames = frames.split('..').map(Number);\n\n      // determine which direction to loop\n      var direction = (consecutiveFrames[0] < consecutiveFrames[1] ? 1 : -1);\n      var i;\n\n      // ascending frame order\n      if (direction === 1) {\n        for (i = consecutiveFrames[0]; i <= consecutiveFrames[1]; i++) {\n          sequence.push(i);\n        }\n      }\n      // descending order\n      else {\n        for (i = consecutiveFrames[0]; i >= consecutiveFrames[1]; i--) {\n          sequence.push(i);\n        }\n      }\n\n      return sequence;\n    }\n  };\n\n  return kontra;\n})(kontra || {});","/**\n * localStorage can be a bit of a pain to work with since it stores everything as strings:\n * localStorage.setItem('item', 1);  //=> '1'\n * localStorage.setItem('item', false);  //=> 'false'\n * localStorage.setItem('item', [1,2,3]);  //=> '1,2,3'\n * localStorage.setItem('item', {a:'b'});  //=> '[object Object]'\n * localStorage.setItem('item', undefinedVariable);  //=> 'undefined'\n *\n * @fileoverview A simple wrapper for localStorage to make it easier to work with.\n * Based on store.js {@see https://github.com/marcuswestin/store.js}\n */\nvar kontra = (function(kontra, window, localStorage, undefined) {\n  'use strict';\n\n  // check if the browser can use localStorage\n  kontra.canUse = kontra.canUse || {};\n  kontra.canUse.localStorage = 'localStorage' in window && window.localStorage !== null;\n\n  if (!kontra.canUse.localStorage) {\n    return kontra;\n  }\n\n  /**\n   * Object for using localStorage.\n   */\n  kontra.store = {};\n\n  /**\n   * Save an item to localStorage.\n   * @memberOf kontra\n   *\n   * @param {string} key - Name to store the item as.\n   * @param {*} value - Item to store.\n   */\n  kontra.store.set = function setStoreItem(key, value) {\n    if (value === undefined) {\n      this.remove(key);\n    }\n    else {\n      localStorage.setItem(key, JSON.stringify(value));\n    }\n  };\n\n  /**\n   * Retrieve an item from localStorage and convert it back to it's original type.\n   * @memberOf kontra\n   *\n   * @param {string} key - Name of the item.\n   *\n   * @returns {*}\n   */\n  kontra.store.get = function getStoreItem(key) {\n    var value = localStorage.getItem(key);\n\n    try {\n      value = JSON.parse(value);\n    }\n    catch(e) {}\n\n    return value;\n  };\n\n  /**\n   * Remove an item from localStorage.\n   * @memberOf kontra\n   *\n   * @param {string} key - Name of the item.\n   */\n  kontra.store.remove = function removeStoreItem(key) {\n    localStorage.removeItem(key);\n  };\n\n  /**\n   * Clear all keys from localStorage.\n   * @memberOf kontra\n   */\n  kontra.store.clear = function clearStore() {\n    localStorage.clear();\n  };\n\n  return kontra;\n})(kontra || {}, window, window.localStorage);","/*jshint -W084 */\n\nvar kontra = (function(kontra, undefined) {\n  'use strict';\n\n  /**\n   * A tile engine for rendering tilesets. Works well with the tile engine program Tiled.\n   * @memberOf kontra\n   * @constructor\n   *\n   * @param {object} properties - Configure the tile engine.\n   * @param {number} properties.tileWidth - Width of the tile.\n   * @param {number} properties.tileHeight - Height of the tile.\n   * @param {number} properties.width - Width of the map (in tiles).\n   * @param {number} properties.height - Height of the map (in tiles).\n   * @param {Context} [properties.context=kontra.context] - Provide a context for the tile engine to draw on.\n   */\n   kontra.TileEngine = function TileEngine(properties) {\n    properties = properties || {};\n\n    var _this = this;\n\n    // since the tile engine can have more than one image, each image must be associated\n    // with a unique set of tiles. This array will hold a reference to the tileset image\n    // that each tile belongs to for quick access when drawing (i.e. O(1))\n    var tileIndex = [undefined];  // index 0 is always an empty tile\n\n    // draw order of layers (by name)\n    var layerOrder = [];\n\n    // size of the tiles\n    // most common tile size on opengameart.org seems to be 32x32, followed by 16x16\n    this.tileWidth = properties.tileWidth || 32;\n    this.tileHeight = properties.tileHeight || 32;\n\n    // size of the map (in tiles)\n    this.width = properties.width || kontra.canvas.width / this.tileWidth | 0;\n    this.height = properties.height || kontra.canvas.height / this.tileHeight | 0;\n\n    // create an off-screen canvas for pre-rendering the map\n    // @see http://jsperf.com/render-vs-prerender\n    var offScreenCanvas = document.createElement('canvas');\n    var offScreenContext = offScreenCanvas.getContext('2d');\n\n    offScreenCanvas.width = this.width * this.tileWidth;\n    offScreenCanvas.height = this.height * this.tileHeight;\n\n    this.context = properties.context || kontra.context;\n    this.layers = {};\n    this.images = [];\n\n    /**\n     * Add an image for the tile engine to use.\n     * @memberOf kontra.TileEngine\n     *\n     * @param {object} properties - Properties of the image to add.\n     * @param {string} properties.name - Name of the image.\n     * @param {string|Image|Canvas} properties.image - Path to the image or Image object.\n     * @param {number} properties.firstTile - The first tile to start the image.\n     */\n    this.addImage = function TileEngineAddImage(properties) {\n      properties = properties || {};\n\n      if (kontra.isString(properties.image)) {\n        kontra.loadImage(properties.image, properties.name).then(\n          function loadImageSuccess(image) {\n            associateImage({image: image, firstTile: properties.firstTile});\n          }, function loadImageError(error) {\n            console.error(error);\n            return;\n        });\n      }\n      else if (kontra.isImage(properties.image) || kontra.isCanvas(properties.image)) {\n        associateImage({image: properties.image, firstTile: properties.firstTile});\n      }\n    };\n\n    /**\n     * Remove an image from the tile engine.\n     * @memberOf kontra.TileEngine\n     *\n     * @param {string} name - Name of the image to remove.\n     */\n    this.removeImage = function TileEngineRemoveImage(name) {\n      var image = kontra.assets[name];\n\n      // unassociate image from tiles\n      for (var i = image.firstTile, len = image.tileWidth * image.tileHeight; i <= len; i++) {\n        tileIndex[i] = null;\n      }\n\n      for (var j = 0, img; img = this.images[j]; j++) {\n        if (image === img) {\n          this.images.splice(j, 1);\n        }\n      }\n    };\n\n\n    /**\n     * Add a layer to the tile engine.\n     * @memberOf kontra.TileEngine\n     *\n     * @param {object} properties - Properties of the layer to add.\n     * @param {string} properties.name - Name of the layer.\n     * @param {number[]} properties.data - Tile layer data.\n     * @param {number} properties.index - Draw order for tile layer. Highest number is drawn last (i.e. on top of all other layers).\n     */\n    this.addLayer = function TileEngineAddLayer(properties) {\n      properties = properties || {};\n\n      this.layers[properties.name] = {\n        data: properties.data,\n        index: properties.index\n      };\n\n      layerOrder.push(properties.name);\n\n      layerOrder.sort(function(a, b) {\n        return _this.layers[a].index - _this.layers[b].index;\n      });\n\n      preRenderImage();\n    };\n\n    /**\n     * Remove a layer from the tile engine.\n     * @memberOf kontra.TileEngine\n     *\n     * @param {string} name - Name of the layer to remove.\n     */\n    this.removeLayer = function TileEngineRemoveLayer(name) {\n      this.layers[name] = null;\n    };\n\n    /**\n     * Draw the pre-rendered canvas.\n     * @memberOf kontra.TileEngine\n     */\n    this.draw = function TileEngineDraw() {\n      this.context.drawImage(offScreenCanvas, 0, 0);\n    };\n\n    /**\n     * Associate an image with its tiles.\n     * @memberOf kontra.TileEngine\n     *\n     * @param {object} properties - Properties of the image to add.\n     * @param {Image|Canvas} properties.image - Image to add.\n     * @param {number} properties.firstTile - The first tile to start the image.\n     */\n    function associateImage(properties) {\n      var image = properties.image;\n      var firstTile = properties.firstTile || tileIndex.length;\n\n      image.tileWidth = image.width / _this.tileWidth;\n      image.tileHeight = image.height / _this.tileHeight;\n      image.firstTile = firstTile;\n\n      _this.images.push(image);\n\n      // associate the new image tiles with the image\n      for (var i = 0, len = image.tileWidth * image.tileHeight; i < len; i++) {\n        // objects are just pointers so storing an object is only storing a pointer of 4 bytes,\n        // which is the same as storing a number\n        // @see http://stackoverflow.com/questions/4740593/how-is-memory-handled-with-javascript-objects\n        // @see http://stackoverflow.com/questions/16888036/javascript-how-to-reduce-the-memory-size-of-a-number\n        tileIndex[firstTile + i] = image;\n      }\n\n      preRenderImage();\n    }\n\n    /**\n     * Pre-render the tiles to make drawing fast.\n     */\n    function preRenderImage() {\n      var tile, image, x, y, sx, sy;\n\n      // draw each layer in order\n      for (var i = 0, layer; layer = _this.layers[layerOrder[i]]; i++) {\n        for (var j = 0, len = layer.data.length; j < len; j++) {\n          tile = layer.data[j];\n\n          // skip empty tiles (0) and skip images that haven't been loaded yet as\n          // they'll pre-render when they are done loading\n          if (!tile || !tileIndex[tile]) {\n            continue;\n          }\n\n          image = tileIndex[tile];\n\n          x = (j % _this.width) * _this.tileWidth;\n          y = (j / _this.width | 0) * _this.tileHeight;\n\n          var tileOffset = tile - image.firstTile;\n\n          sx = (tileOffset % image.tileWidth) * _this.tileWidth;\n          sy = (tileOffset / image.tileWidth | 0) * _this.tileHeight;\n\n          offScreenContext.drawImage(image, sx, sy, _this.tileWidth, _this.tileHeight, x, y, _this.tileWidth, _this.tileHeight);\n        }\n      }\n    }\n  };\n\n  return kontra;\n})(kontra || {});"],"sourceRoot":"/source/"}